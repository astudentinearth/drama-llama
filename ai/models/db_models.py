from sqlalchemy import Column, Integer, String, Text, DateTime, ForeignKey, Float, JSON, Boolean, Enum as SQLEnum
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from datetime import datetime
import enum

Base = declarative_base()


class SkillLevelEnum(str, enum.Enum):
    """Skill proficiency levels."""
    BEGINNER = "beginner"
    INTERMEDIATE = "intermediate"
    ADVANCED = "advanced"
    EXPERT = "expert"


class RoadmapStatusEnum(str, enum.Enum):
    """Roadmap status types."""
    DRAFT = "draft"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    ARCHIVED = "archived"


class User(Base):
    """
    User model for the AI service.
    This stores essential user information synced from the backend auth service.
    Acts as a local reference for user-related AI data (roadmaps, skills, etc.).
    """
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)  # Same ID as backend auth service
    username = Column(String(255), unique=True, nullable=False, index=True)
    email = Column(String(255), unique=True, nullable=False, index=True)
    full_name = Column(String(500))
    
    # User profile data for personalization
    bio = Column(Text)
    current_role = Column(String(255)) 
    years_of_experience = Column(Integer, default=0)

    # Sync metadata
    is_active = Column(Boolean, default=True)
    synced_from_auth_at = Column(DateTime)  # Last sync time from backend auth service
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    last_activity_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships - a user can have multiple roadmaps and skills
    roadmaps = relationship("Roadmap", back_populates="user", cascade="all, delete-orphan")
    skills = relationship("UserSkill", back_populates="user", cascade="all, delete-orphan")
    
    def __repr__(self):
        return f"<User(id={self.id}, username={self.username}, email={self.email})>"


class Roadmap(Base):
    """
    Stores roadmap skeleton generated by createRoadmapSkeleton.
    Contains the overall roadmap structure with goals and graduation project.
    """
    __tablename__ = "roadmaps"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False, index=True)
    
    # Input data
    user_request = Column(Text, nullable=False)
    user_summarized_cv = Column(Text)
    user_expertise_domains = Column(JSON)  # List of domains
    job_listings = Column(JSON)  # List of job listing texts/URLs
    
    # Generated data
    total_estimated_weeks = Column(Integer)
    graduation_project = Column(Text)
    graduation_project_title = Column(String(500))
    graduation_project_requirements = Column(JSON)  # List of requirements
    graduation_project_estimated_hours = Column(Integer)
    
    # Metadata
    status = Column(SQLEnum(RoadmapStatusEnum), default=RoadmapStatusEnum.DRAFT)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    completed_at = Column(DateTime, nullable=True)
    
    # Relationships
    user = relationship("User", back_populates="roadmaps")
    goals = relationship("RoadmapGoal", back_populates="roadmap", cascade="all, delete-orphan")
    learning_materials = relationship("LearningMaterial", back_populates="roadmap", cascade="all, delete-orphan")
    
    def __repr__(self):
        return f"<Roadmap(id={self.id}, user_id={self.user_id}, status={self.status})>"


class RoadmapGoal(Base):
    """
    Stores individual goals/things-to-learn from the roadmap.
    Each goal represents a learning objective in the roadmap.
    """
    __tablename__ = "roadmap_goals"
    
    id = Column(Integer, primary_key=True, index=True)
    roadmap_id = Column(Integer, ForeignKey("roadmaps.id", ondelete="CASCADE"), nullable=False, index=True)
    
    # Goal details
    goal_number = Column(Integer, nullable=False)  # Order in the roadmap
    title = Column(String(500), nullable=False)
    description = Column(Text, nullable=False)
    priority = Column(Integer, default=3)  # 1-5 scale
    skill_level = Column(SQLEnum(SkillLevelEnum), default=SkillLevelEnum.BEGINNER)
    
    # Time estimation
    estimated_hours = Column(Integer)
    actual_hours_spent = Column(Integer, default=0)
    
    # Prerequisites
    prerequisites = Column(JSON)  # List of prerequisite skills/goals
    
    # Progress tracking
    is_completed = Column(Boolean, default=False)
    completion_percentage = Column(Float, default=0.0)
    started_at = Column(DateTime, nullable=True)
    completed_at = Column(DateTime, nullable=True)
    
    # Metadata
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    
    # Relationships
    roadmap = relationship("Roadmap", back_populates="goals")
    learning_materials = relationship("LearningMaterial", back_populates="goal", cascade="all, delete-orphan")
    
    def __repr__(self):
        return f"<RoadmapGoal(id={self.id}, title={self.title}, completed={self.is_completed})>"


class LearningMaterial(Base):
    """
    Stores learning materials generated by createLearningMaterials.
    Contains curated resources, tutorials, and content for each goal.
    """
    __tablename__ = "learning_materials"
    
    id = Column(Integer, primary_key=True, index=True)
    roadmap_id = Column(Integer, ForeignKey("roadmaps.id", ondelete="CASCADE"), nullable=False, index=True)
    goal_id = Column(Integer, ForeignKey("roadmap_goals.id", ondelete="CASCADE"), nullable=True, index=True)
    
    # Material content
    material_type = Column(String(100))  # e.g., "article", "video", "tutorial", "course", "documentation"
    title = Column(String(500), nullable=False)
    content = Column(Text)  # Generated or scraped content
    source_url = Column(Text)  # Original URL if scraped
    
    # Material details
    description = Column(Text)
    estimated_time_minutes = Column(Integer)
    difficulty_level = Column(SQLEnum(SkillLevelEnum))
    
    # End of material project
    end_of_material_project = Column(Text)  # Small project to practice the learned material
    project_requirements = Column(JSON)  # List of project requirements
    
    # Quality metrics
    relevance_score = Column(Float)  # How relevant to the goal (0-1)
    quality_score = Column(Float)  # Overall quality score (0-1)
    
    # Progress tracking
    is_completed = Column(Boolean, default=False)
    user_rating = Column(Integer)  # User feedback (1-5)
    user_notes = Column(Text)  # User's personal notes
    
    # Metadata
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    completed_at = Column(DateTime, nullable=True)
    
    # Relationships
    roadmap = relationship("Roadmap", back_populates="learning_materials")
    goal = relationship("RoadmapGoal", back_populates="learning_materials")
    
    def __repr__(self):
        return f"<LearningMaterial(id={self.id}, title={self.title}, type={self.material_type})>"

class UserSkill(Base):
    """
    Stores user's skills extracted from CV and updated through progress.
    Helps in personalizing roadmaps and tracking skill development.
    """
    __tablename__ = "user_skills"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False, index=True)
    
    # Skill details
    skill_name = Column(String(200), nullable=False)
    skill_level = Column(SQLEnum(SkillLevelEnum), default=SkillLevelEnum.BEGINNER)
    confidence_score = Column(Float, default=0.8)  # 0-1 scale
    
    # Source
    source = Column(String(100))  # "cv", "course_completion", "self_reported", "assessment"
    verified = Column(Boolean, default=False)
    
    # Metadata
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    
    # Relationships
    user = relationship("User", back_populates="skills")
    
    def __repr__(self):
        return f"<UserSkill(user_id={self.user_id}, skill={self.skill_name}, level={self.skill_level})>"
